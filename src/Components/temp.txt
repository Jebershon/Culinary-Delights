import axios from "axios";
import { jwtDecode } from "jwt-decode";
import React, { useEffect, useState } from "react";
import { Button, Card, CloseButton, Col, Container, Dropdown, DropdownButton, Form, InputGroup, Row } from "react-bootstrap";
function CartDetails() {
  const [cart, setCart] = useState([]);
  useEffect(() => {
    const token = jwtDecode(window.localStorage.getItem("token"));
    const userId = token.id;
    axios.get(`http://localhost:3001/getCartDetails/${userId}`)
      .then(response => {
        console.log("Fetched cart details:", response.data); // Log fetched data for debugging
        setCart(response.data); // Set the cart state with the fetched data
      })
      .catch(error => {
        console.error("Error fetching cart details:", error);
      });
    }, []);

  const handleChange = (selected, itemIndex) => {
    const updatedCart = [...cart];
    updatedCart[itemIndex].quantity = selected; // Update quantity in the cart item
    setCart(updatedCart); // Update the cart state
    handleUpdateCartItem(updatedCart[itemIndex]._id, updatedCart[itemIndex].count, selected); // Call handleUpdateCartItem
  };

  const handleIncrement = (itemIndex) => {
    const updatedCart = [...cart];
    updatedCart[itemIndex].count++; // Increment count in the cart item
    setCart(updatedCart); // Update the cart state
    handleUpdateCartItem(updatedCart[itemIndex]._id, updatedCart[itemIndex].count, updatedCart[itemIndex].quantity); // Call handleUpdateCartItem
  };

  const handleDecrement = (itemIndex) => {
    const updatedCart = [...cart];
    if (updatedCart[itemIndex].count > 0) {
      updatedCart[itemIndex].count--; // Decrement count in the cart item
      setCart(updatedCart); // Update the cart state
      handleUpdateCartItem(updatedCart[itemIndex]._id, updatedCart[itemIndex].count, updatedCart[itemIndex].quantity); // Call handleUpdateCartItem
    }
  };

  const handleRemoveItem = (itemId, itemIndex) => {
    const token = jwtDecode(window.localStorage.getItem("token"));
    const userId = token.id;
    axios.delete(`http://localhost:3001/removeCartItem/${userId}/${itemId}`)
      .then(response => {
        console.log(response.data);
        const updatedCart = cart.filter((_, index) => index !== itemIndex);
        setCart(updatedCart); 
      })
      .catch(error => {
        console.error("Error removing cart item:", error);
      });
  };

  const handleUpdateCartItem = (itemId, count, quantity) => {
    const token = jwtDecode(window.localStorage.getItem("token"));
    const userId = token.id;
    axios.put(`http://localhost:3001/updateCartItem/${userId}/${itemId}`, { count, quantity })
      .then(response => {
        console.log(response.data);
        const updatedCart = cart.map(item => {
          if (item._id === itemId) {
            return { ...item, count, ingredientQuantity: quantity };
          }
          return item;
        });
        setCart(updatedCart);
      })
      .catch(error => {
        console.error("Error updating cart item:", error);
      });
  };
  return (
    <Container>
      <br />
      <br />
      <Container>
      {cart.length > 0 ? (
         cart.map((item, index) => (
          <Card key={index}>
            <Row>
              <Col><Card.Img src={item.ingredientURL} style={{ width: "100px", height: "100px" }} /></Col>
              <Col>
                <DropdownButton
                  variant="outline-warning"
                  title={`Quantity ${item.ingredientQuantity}g`}
                  id={`input-group-dropdown-${index}`}
                  className="mt-5"
                  onSelect={(selected) => handleChange(selected, index)}
                >
                  <Dropdown.Item eventKey="50">50g</Dropdown.Item>
                  <Dropdown.Divider />
                  <Dropdown.Item eventKey="100">100g</Dropdown.Item>
                  <Dropdown.Divider />
                  <Dropdown.Item eventKey="500">500g</Dropdown.Item>
                  <Dropdown.Divider />
                  <Dropdown.Item eventKey="750">750g</Dropdown.Item>
                </DropdownButton>
              </Col>
            </Row>
            <Card.Header>{item.ingredientName}</Card.Header>
            <Row className="text-center">
              <Col>
                <Card.Text className="mt-3 mb-2 mar">â‚¹{item.ingredientPrice}</Card.Text>
              </Col>
              <Col>
                <Card.Text className="mt-2 mb-2">
                  <InputGroup className="input-group">
                    <Button variant="outline-warning" id={`button-addon1-${index}`} onClick={() => handleDecrement(index)}>-</Button>
                    <Form.Control
                      aria-label="Example text with button addon"
                      width="30px"
                      aria-describedby={`basic-addon1-${index}`}
                      className="quantity-field"
                      value={item.ingredientCount}
                    />
                    <Button variant="outline-warning" id={`button-addon2-${index}`} onClick={() => handleIncrement(index)}>+</Button>
                  </InputGroup>
                </Card.Text>
              </Col>
              <Col className="mt-3 mb-2">
                <CloseButton onClick={() => handleRemoveItem(item._id,index)} />
              </Col>
            </Row>
          </Card>
        ))
        ) : (
          <p>Your cart is empty</p>
        )}
      </Container>
    </Container>
  );
}

export default CartDetails;
